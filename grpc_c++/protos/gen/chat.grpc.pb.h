// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chat.proto
#ifndef GRPC_chat_2eproto__INCLUDED
#define GRPC_chat_2eproto__INCLUDED

#include "chat.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace cpp_chat {

class chat final {
 public:
  static constexpr char const* service_full_name() {
    return "cpp_chat.chat";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status login(::grpc::ClientContext* context, const ::cpp_chat::User& request, ::cpp_chat::SimpleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cpp_chat::SimpleResponse>> Asynclogin(::grpc::ClientContext* context, const ::cpp_chat::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cpp_chat::SimpleResponse>>(AsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cpp_chat::SimpleResponse>> PrepareAsynclogin(::grpc::ClientContext* context, const ::cpp_chat::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cpp_chat::SimpleResponse>>(PrepareAsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::cpp_chat::User>> userList(::grpc::ClientContext* context, const ::cpp_chat::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::cpp_chat::User>>(userListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cpp_chat::User>> AsyncuserList(::grpc::ClientContext* context, const ::cpp_chat::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cpp_chat::User>>(AsyncuserListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cpp_chat::User>> PrepareAsyncuserList(::grpc::ClientContext* context, const ::cpp_chat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cpp_chat::User>>(PrepareAsyncuserListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::cpp_chat::User>> reLogin(::grpc::ClientContext* context, ::cpp_chat::SimpleResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::cpp_chat::User>>(reLoginRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::cpp_chat::User>> AsyncreLogin(::grpc::ClientContext* context, ::cpp_chat::SimpleResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::cpp_chat::User>>(AsyncreLoginRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::cpp_chat::User>> PrepareAsyncreLogin(::grpc::ClientContext* context, ::cpp_chat::SimpleResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::cpp_chat::User>>(PrepareAsyncreLoginRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::cpp_chat::Message, ::cpp_chat::Message>> enterChatRoom(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::cpp_chat::Message, ::cpp_chat::Message>>(enterChatRoomRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::cpp_chat::Message, ::cpp_chat::Message>> AsyncenterChatRoom(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::cpp_chat::Message, ::cpp_chat::Message>>(AsyncenterChatRoomRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::cpp_chat::Message, ::cpp_chat::Message>> PrepareAsyncenterChatRoom(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::cpp_chat::Message, ::cpp_chat::Message>>(PrepareAsyncenterChatRoomRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void login(::grpc::ClientContext* context, const ::cpp_chat::User* request, ::cpp_chat::SimpleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cpp_chat::SimpleResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void login(::grpc::ClientContext* context, const ::cpp_chat::User* request, ::cpp_chat::SimpleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void login(::grpc::ClientContext* context, const ::cpp_chat::User* request, ::cpp_chat::SimpleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cpp_chat::SimpleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cpp_chat::SimpleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void userList(::grpc::ClientContext* context, ::cpp_chat::Empty* request, ::grpc::ClientReadReactor< ::cpp_chat::User>* reactor) = 0;
      #else
      virtual void userList(::grpc::ClientContext* context, ::cpp_chat::Empty* request, ::grpc::experimental::ClientReadReactor< ::cpp_chat::User>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void reLogin(::grpc::ClientContext* context, ::cpp_chat::SimpleResponse* response, ::grpc::ClientWriteReactor< ::cpp_chat::User>* reactor) = 0;
      #else
      virtual void reLogin(::grpc::ClientContext* context, ::cpp_chat::SimpleResponse* response, ::grpc::experimental::ClientWriteReactor< ::cpp_chat::User>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void enterChatRoom(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::cpp_chat::Message,::cpp_chat::Message>* reactor) = 0;
      #else
      virtual void enterChatRoom(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::cpp_chat::Message,::cpp_chat::Message>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cpp_chat::SimpleResponse>* AsyncloginRaw(::grpc::ClientContext* context, const ::cpp_chat::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cpp_chat::SimpleResponse>* PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::cpp_chat::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::cpp_chat::User>* userListRaw(::grpc::ClientContext* context, const ::cpp_chat::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::cpp_chat::User>* AsyncuserListRaw(::grpc::ClientContext* context, const ::cpp_chat::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::cpp_chat::User>* PrepareAsyncuserListRaw(::grpc::ClientContext* context, const ::cpp_chat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::cpp_chat::User>* reLoginRaw(::grpc::ClientContext* context, ::cpp_chat::SimpleResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::cpp_chat::User>* AsyncreLoginRaw(::grpc::ClientContext* context, ::cpp_chat::SimpleResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::cpp_chat::User>* PrepareAsyncreLoginRaw(::grpc::ClientContext* context, ::cpp_chat::SimpleResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::cpp_chat::Message, ::cpp_chat::Message>* enterChatRoomRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::cpp_chat::Message, ::cpp_chat::Message>* AsyncenterChatRoomRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::cpp_chat::Message, ::cpp_chat::Message>* PrepareAsyncenterChatRoomRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status login(::grpc::ClientContext* context, const ::cpp_chat::User& request, ::cpp_chat::SimpleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cpp_chat::SimpleResponse>> Asynclogin(::grpc::ClientContext* context, const ::cpp_chat::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cpp_chat::SimpleResponse>>(AsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cpp_chat::SimpleResponse>> PrepareAsynclogin(::grpc::ClientContext* context, const ::cpp_chat::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cpp_chat::SimpleResponse>>(PrepareAsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::cpp_chat::User>> userList(::grpc::ClientContext* context, const ::cpp_chat::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::cpp_chat::User>>(userListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::cpp_chat::User>> AsyncuserList(::grpc::ClientContext* context, const ::cpp_chat::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::cpp_chat::User>>(AsyncuserListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::cpp_chat::User>> PrepareAsyncuserList(::grpc::ClientContext* context, const ::cpp_chat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::cpp_chat::User>>(PrepareAsyncuserListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::cpp_chat::User>> reLogin(::grpc::ClientContext* context, ::cpp_chat::SimpleResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::cpp_chat::User>>(reLoginRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::cpp_chat::User>> AsyncreLogin(::grpc::ClientContext* context, ::cpp_chat::SimpleResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::cpp_chat::User>>(AsyncreLoginRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::cpp_chat::User>> PrepareAsyncreLogin(::grpc::ClientContext* context, ::cpp_chat::SimpleResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::cpp_chat::User>>(PrepareAsyncreLoginRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::cpp_chat::Message, ::cpp_chat::Message>> enterChatRoom(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::cpp_chat::Message, ::cpp_chat::Message>>(enterChatRoomRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::cpp_chat::Message, ::cpp_chat::Message>> AsyncenterChatRoom(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::cpp_chat::Message, ::cpp_chat::Message>>(AsyncenterChatRoomRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::cpp_chat::Message, ::cpp_chat::Message>> PrepareAsyncenterChatRoom(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::cpp_chat::Message, ::cpp_chat::Message>>(PrepareAsyncenterChatRoomRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void login(::grpc::ClientContext* context, const ::cpp_chat::User* request, ::cpp_chat::SimpleResponse* response, std::function<void(::grpc::Status)>) override;
      void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cpp_chat::SimpleResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void login(::grpc::ClientContext* context, const ::cpp_chat::User* request, ::cpp_chat::SimpleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void login(::grpc::ClientContext* context, const ::cpp_chat::User* request, ::cpp_chat::SimpleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cpp_chat::SimpleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cpp_chat::SimpleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void userList(::grpc::ClientContext* context, ::cpp_chat::Empty* request, ::grpc::ClientReadReactor< ::cpp_chat::User>* reactor) override;
      #else
      void userList(::grpc::ClientContext* context, ::cpp_chat::Empty* request, ::grpc::experimental::ClientReadReactor< ::cpp_chat::User>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void reLogin(::grpc::ClientContext* context, ::cpp_chat::SimpleResponse* response, ::grpc::ClientWriteReactor< ::cpp_chat::User>* reactor) override;
      #else
      void reLogin(::grpc::ClientContext* context, ::cpp_chat::SimpleResponse* response, ::grpc::experimental::ClientWriteReactor< ::cpp_chat::User>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void enterChatRoom(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::cpp_chat::Message,::cpp_chat::Message>* reactor) override;
      #else
      void enterChatRoom(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::cpp_chat::Message,::cpp_chat::Message>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cpp_chat::SimpleResponse>* AsyncloginRaw(::grpc::ClientContext* context, const ::cpp_chat::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cpp_chat::SimpleResponse>* PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::cpp_chat::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::cpp_chat::User>* userListRaw(::grpc::ClientContext* context, const ::cpp_chat::Empty& request) override;
    ::grpc::ClientAsyncReader< ::cpp_chat::User>* AsyncuserListRaw(::grpc::ClientContext* context, const ::cpp_chat::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::cpp_chat::User>* PrepareAsyncuserListRaw(::grpc::ClientContext* context, const ::cpp_chat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::cpp_chat::User>* reLoginRaw(::grpc::ClientContext* context, ::cpp_chat::SimpleResponse* response) override;
    ::grpc::ClientAsyncWriter< ::cpp_chat::User>* AsyncreLoginRaw(::grpc::ClientContext* context, ::cpp_chat::SimpleResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::cpp_chat::User>* PrepareAsyncreLoginRaw(::grpc::ClientContext* context, ::cpp_chat::SimpleResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::cpp_chat::Message, ::cpp_chat::Message>* enterChatRoomRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::cpp_chat::Message, ::cpp_chat::Message>* AsyncenterChatRoomRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::cpp_chat::Message, ::cpp_chat::Message>* PrepareAsyncenterChatRoomRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_login_;
    const ::grpc::internal::RpcMethod rpcmethod_userList_;
    const ::grpc::internal::RpcMethod rpcmethod_reLogin_;
    const ::grpc::internal::RpcMethod rpcmethod_enterChatRoom_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status login(::grpc::ServerContext* context, const ::cpp_chat::User* request, ::cpp_chat::SimpleResponse* response);
    virtual ::grpc::Status userList(::grpc::ServerContext* context, const ::cpp_chat::Empty* request, ::grpc::ServerWriter< ::cpp_chat::User>* writer);
    virtual ::grpc::Status reLogin(::grpc::ServerContext* context, ::grpc::ServerReader< ::cpp_chat::User>* reader, ::cpp_chat::SimpleResponse* response);
    virtual ::grpc::Status enterChatRoom(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::cpp_chat::Message, ::cpp_chat::Message>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_login() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::cpp_chat::User* /*request*/, ::cpp_chat::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin(::grpc::ServerContext* context, ::cpp_chat::User* request, ::grpc::ServerAsyncResponseWriter< ::cpp_chat::SimpleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_userList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_userList() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_userList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userList(::grpc::ServerContext* /*context*/, const ::cpp_chat::Empty* /*request*/, ::grpc::ServerWriter< ::cpp_chat::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserList(::grpc::ServerContext* context, ::cpp_chat::Empty* request, ::grpc::ServerAsyncWriter< ::cpp_chat::User>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_reLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_reLogin() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_reLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reLogin(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::cpp_chat::User>* /*reader*/, ::cpp_chat::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreLogin(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::cpp_chat::SimpleResponse, ::cpp_chat::User>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_enterChatRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_enterChatRoom() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_enterChatRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enterChatRoom(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::cpp_chat::Message, ::cpp_chat::Message>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestenterChatRoom(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::cpp_chat::Message, ::cpp_chat::Message>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_login<WithAsyncMethod_userList<WithAsyncMethod_reLogin<WithAsyncMethod_enterChatRoom<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::cpp_chat::User, ::cpp_chat::SimpleResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::cpp_chat::User* request, ::cpp_chat::SimpleResponse* response) { return this->login(context, request, response); }));}
    void SetMessageAllocatorFor_login(
        ::grpc::experimental::MessageAllocator< ::cpp_chat::User, ::cpp_chat::SimpleResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::cpp_chat::User, ::cpp_chat::SimpleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::cpp_chat::User* /*request*/, ::cpp_chat::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* login(
      ::grpc::CallbackServerContext* /*context*/, const ::cpp_chat::User* /*request*/, ::cpp_chat::SimpleResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::cpp_chat::User* /*request*/, ::cpp_chat::SimpleResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_userList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_userList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::cpp_chat::Empty, ::cpp_chat::User>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::cpp_chat::Empty* request) { return this->userList(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_userList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userList(::grpc::ServerContext* /*context*/, const ::cpp_chat::Empty* /*request*/, ::grpc::ServerWriter< ::cpp_chat::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::cpp_chat::User>* userList(
      ::grpc::CallbackServerContext* /*context*/, const ::cpp_chat::Empty* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::cpp_chat::User>* userList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::cpp_chat::Empty* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_reLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_reLogin() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::cpp_chat::User, ::cpp_chat::SimpleResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::cpp_chat::SimpleResponse* response) { return this->reLogin(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_reLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reLogin(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::cpp_chat::User>* /*reader*/, ::cpp_chat::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::cpp_chat::User>* reLogin(
      ::grpc::CallbackServerContext* /*context*/, ::cpp_chat::SimpleResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::cpp_chat::User>* reLogin(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::cpp_chat::SimpleResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_enterChatRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_enterChatRoom() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackBidiHandler< ::cpp_chat::Message, ::cpp_chat::Message>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->enterChatRoom(context); }));
    }
    ~ExperimentalWithCallbackMethod_enterChatRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enterChatRoom(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::cpp_chat::Message, ::cpp_chat::Message>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::cpp_chat::Message, ::cpp_chat::Message>* enterChatRoom(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::cpp_chat::Message, ::cpp_chat::Message>* enterChatRoom(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_login<ExperimentalWithCallbackMethod_userList<ExperimentalWithCallbackMethod_reLogin<ExperimentalWithCallbackMethod_enterChatRoom<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_login<ExperimentalWithCallbackMethod_userList<ExperimentalWithCallbackMethod_reLogin<ExperimentalWithCallbackMethod_enterChatRoom<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_login() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::cpp_chat::User* /*request*/, ::cpp_chat::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_userList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_userList() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_userList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userList(::grpc::ServerContext* /*context*/, const ::cpp_chat::Empty* /*request*/, ::grpc::ServerWriter< ::cpp_chat::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_reLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_reLogin() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_reLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reLogin(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::cpp_chat::User>* /*reader*/, ::cpp_chat::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_enterChatRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_enterChatRoom() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_enterChatRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enterChatRoom(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::cpp_chat::Message, ::cpp_chat::Message>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_login() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::cpp_chat::User* /*request*/, ::cpp_chat::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_userList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_userList() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_userList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userList(::grpc::ServerContext* /*context*/, const ::cpp_chat::Empty* /*request*/, ::grpc::ServerWriter< ::cpp_chat::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_reLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_reLogin() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_reLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reLogin(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::cpp_chat::User>* /*reader*/, ::cpp_chat::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreLogin(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_enterChatRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_enterChatRoom() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_enterChatRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enterChatRoom(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::cpp_chat::Message, ::cpp_chat::Message>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestenterChatRoom(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->login(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::cpp_chat::User* /*request*/, ::cpp_chat::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_userList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_userList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->userList(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_userList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userList(::grpc::ServerContext* /*context*/, const ::cpp_chat::Empty* /*request*/, ::grpc::ServerWriter< ::cpp_chat::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* userList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* userList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_reLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_reLogin() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->reLogin(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_reLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reLogin(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::cpp_chat::User>* /*reader*/, ::cpp_chat::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* reLogin(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* reLogin(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_enterChatRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_enterChatRoom() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->enterChatRoom(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_enterChatRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enterChatRoom(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::cpp_chat::Message, ::cpp_chat::Message>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* enterChatRoom(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* enterChatRoom(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_login() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::cpp_chat::User, ::cpp_chat::SimpleResponse>(std::bind(&WithStreamedUnaryMethod_login<BaseClass>::Streamedlogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::cpp_chat::User* /*request*/, ::cpp_chat::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cpp_chat::User,::cpp_chat::SimpleResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_login<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_userList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_userList() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::cpp_chat::Empty, ::cpp_chat::User>(std::bind(&WithSplitStreamingMethod_userList<BaseClass>::StreameduserList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_userList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status userList(::grpc::ServerContext* /*context*/, const ::cpp_chat::Empty* /*request*/, ::grpc::ServerWriter< ::cpp_chat::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreameduserList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::cpp_chat::Empty,::cpp_chat::User>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_userList<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_login<WithSplitStreamingMethod_userList<Service > > StreamedService;
};

}  // namespace cpp_chat


#endif  // GRPC_chat_2eproto__INCLUDED
